import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter
import fnmatch
import numpy as np
import os
import random
import time

def getFunction(basis,n,x):
    if basis=='legendre':
        return LegendreP(n,x)
    elif basis=='legendreOrthonormal':
        return LegendrePorthonormal(n,x)
    elif basis=='quadratic':
        return Quadratic(n,x)
    elif basis=='linear':
        return linear(n,x)
    else:
        return 0

def LegendreP(n,x):
    if n==0:
        return 1
    elif n==1:
        return x
    else:
        return ((2.0*n-1.0)*x*LegendreP(n-1,x)-(n-1)*LegendreP(n-2,x))/n
    
def LegendrePorthonormal(n,x):
    return np.sqrt((2.0*n+1.0)/2.0)*LegendreP(n,x)

def Quadratic(n,x):
    if n==0:
        return -x*(1.0-x)/2.0
    elif n==1:
        return (1.0-x)*(1.0+x)
    else:
        return x*(1+x)/2
    
def linear(n,x):
    if n==0:
        return (1.0-x)/2.0
    else:
        return (1+x)/2

def assignFloat(varString):
    number = 1.0
    valueCheck = "*"
    value = varString
    while("*" in valueCheck):
        valueCheck = value
        if "*" in value:
            dum1 = value[0:value.index("*")]
            value = value[value.index("*")+1:]
        else:
            dum1 = value
        if dum1 == "pi":
            number*=np.pi
        else:
            number*=float(dum1)
        
        
    return number

fileName = 'Density.csv'
fileNameSol = 'OutputS.csv'
inputFile = open('input.txt','r')

while True:
    inputParam = inputFile.readline()

    if inputParam[0:4]=='jMax':        
        jMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:6]=='length':
        value = inputParam[inputParam.index('=')+2:-1]
        length = assignFloat(value)
    elif inputParam[0:4]=='lMax':
        lMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:5]=='basis':
        basis = inputParam[inputParam.index('=')+2:-1]
    elif inputParam[0:4]=='tMax':
        tMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:2]=='dt':
        dt = float(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:4]=='nout':
        nout = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:3]=='nvx':
        nvx = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:5]=='maxVX':
        domainMaxVX = assignFloat(inputParam[inputParam.index('=')+2:-1])
    if not inputParam:
        break
nout+=1
lMax+=1
inputFile.close()

values = pd.read_csv(fileName,header=None)
values = values[0].to_numpy()
# valuesSol = pd.read_csv(fileNameSol,header=None)
# valuesSol = valuesSol[0].to_numpy()
m = 335664
dx = length/jMax
dvx = 2*domainMaxVX/(nvx-1)
# dvx = 1.0/nvx
u = np.zeros((lMax,jMax))
# uSol = np.zeros((lMax,jMax,nvx))

fig = plt.figure()
ax = fig.gca()
ax.set_yscale('log')

for j in range(jMax):
    for lx in range(lMax):
        u[lx,j] = values[m]
        # uSol[lx,j,k] = valuesSol[m]
        m = m+1

res = 2
for j in range(jMax):
    xj = j*dx+dx/2
    y = np.zeros(res)
    x = np.zeros(res)
    # sol = np.zeros(res)
    for i in range(res):
        x[i] = j*dx+i*dx/(res-1)
        for l in range(lMax):
            y[i] += u[l][j]*getFunction(basis,l,(2.0/dx)*(x[i]-xj))
            # print(u[l][j])
            # sol[i] += uSol[l][j][vx]*getFunction(basis,l,(2.0/dx)*(x[i]-xj))
    plt.plot(x,y,color='red')
        # ax.plot(x,[y_offset]*len(x),sol,color='black')
        # ax.plot(x,[y_offset]*len(x),y-sol,color='red')
sol = (4.9761*10**18, 4.16014*10**18, 3.50346*10**18, 2.96444*10**18, \
2.51785*10**18, 2.14539*10**18, 1.83314*10**18, 1.57023*10**18, \
1.34806*10**18, 1.1597*10**18, 9.99541*10**17, 8.63013*10**17, \
7.46353*10**17, 6.46452*10**17, 5.6073*10**17, 4.87038*10**17, \
4.23576*10**17, 3.68836*10**17, 3.21544*10**17, 2.80629*10**17, \
2.45181*10**17, 2.1443*10**17, 1.87719*10**17, 1.64491*10**17, \
1.44267*10**17, 1.26641*10**17, 1.11262*10**17, 9.78309*10**16, \
8.60888*10**16, 7.5814*10**16, 6.6815*10**16, 5.89265*10**16, \
5.20057*10**16, 4.59288*10**16, 4.05888*10**16, 3.58926*10**16, \
3.17597*10**16, 2.81198*10**16, 2.49118*10**16, 2.20826*10**16, \
1.95857*10**16, 1.73808*10**16, 1.54324*10**16, 1.37097*10**16, \
1.21855*10**16, 1.08363*10**16, 9.64119*10**15, 8.58205*10**15, \
7.64288*10**15, 6.80965*10**15, 6.07002*10**15, 5.41314*10**15, \
4.82946*10**15, 4.31056*10**15, 3.84904*10**15, 3.43836*10**15, \
3.07274*10**15, 2.7471*10**15, 2.45693*10**15, 2.19826*10**15, \
1.96757*10**15, 1.76175*10**15, 1.57804*10**15, 1.41399*10**15, \
1.26745*10**15, 1.13649*10**15, 1.01941*10**15, 9.14708*10**14, \
8.21031*10**14, 7.37191*10**14, 6.62127*10**14, 5.94896*10**14, \
5.3466*10**14, 4.80672*10**14, 4.32269*10**14, 3.88856*10**14, \
3.49908*10**14, 3.14954*10**14, 2.83574*10**14, 2.55393*10**14, \
2.30078*10**14, 2.07329*10**14, 1.86882*10**14, 1.68497*10**14, \
1.51961*10**14, 1.37085*10**14, 1.23697*10**14, 1.11645*10**14, \
1.00794*10**14, 9.10199*10**13, 8.22144*10**13, 7.42791*10**13, \
6.7126*10**13, 6.06765*10**13, 5.48596*10**13, 4.96122*10**13, \
4.48771*10**13, 4.06033*10**13, 3.67449*10**13, 3.32607*10**13, \
3.01136*10**13, 2.72702*10**13, 2.47008*10**13, 2.23783*10**13, \
2.02785*10**13, 1.83796*10**13, 1.6662*10**13, 1.51081*10**13, \
1.37019*10**13, 1.24292*10**13, 1.12769*10**13, 1.02335*10**13, \
9.28849*10**12, 8.43239*10**12, 7.65668*10**12, 6.95366*10**12, \
6.3164*10**12, 5.73862*10**12, 5.21467*10**12, 4.73944*10**12, \
4.3083*10**12, 3.9171*10**12, 3.56207*10**12, 3.23979*10**12, \
2.94719*10**12, 2.68149*10**12, 2.44017*10**12, 2.22095*10**12, \
2.02177*10**12, 1.84077*10**12, 1.67625*10**12, 1.52669*10**12, \
1.39071*10**12, 1.26705*10**12, 1.15457*10**12, 1.05225*10**12, \
9.59146*10**11, 8.74423*10**11, 7.97309*10**11, 7.27111*10**11, \
6.63196*10**11, 6.04994*10**11, 5.51984*10**11, 5.03697*10**11, \
4.59704*10**11, 4.19616*10**11, 3.83083*10**11, 3.49782*10**11, \
3.19424*10**11, 2.91745*10**11, 2.66504*10**11, 2.43483*10**11, \
2.22483*10**11, 2.03325*10**11, 1.85845*10**11, 1.69893*10**11, \
1.55334*10**11, 1.42045*10**11, 1.29912*10**11, 1.18835*10**11, \
1.0872*10**11, 9.94825*10**10, 9.10454*10**10, 8.33388*10**10, \
7.62986*10**10, 6.98667*10**10, 6.39902*10**10, 5.86208*10**10, \
5.37146*10**10, 4.92315*10**10, 4.5135*10**10, 4.1392*10**10, \
3.7972*10**10, 3.48475*10**10, 3.19935*10**10, 2.93869*10**10, \
2.70069*10**10, 2.48346*10**10, 2.28527*10**10, 2.10454*10**10, \
1.93984*10**10, 1.78987*10**10, 1.65346*10**10, 1.52952*10**10, \
1.41708*10**10, 1.31528*10**10, 1.22331*10**10, 1.14045*10**10, \
1.06606*10**10, 9.99568*10**9, 9.40453*10**9, 8.8826*10**9, 8.42586*10**9, \
8.03077*10**9, 7.69429*10**9, 7.41384*10**9, 7.18727*10**9, 7.01282*10**9, \
6.88916*10**9, 6.81534*10**9, 6.7908*10**9, 6.81534*10**9, 6.88916*10**9, \
7.01282*10**9, 7.18727*10**9, 7.41384*10**9, 7.69429*10**9, 8.03077*10**9, \
8.42586*10**9, 8.8826*10**9, 9.40453*10**9, 9.99568*10**9, 1.06606*10**10, \
1.14045*10**10, 1.22331*10**10, 1.31528*10**10, 1.41708*10**10, \
1.52952*10**10, 1.65346*10**10, 1.78987*10**10, 1.93984*10**10, \
2.10454*10**10, 2.28527*10**10, 2.48346*10**10, 2.70069*10**10, \
2.93869*10**10, 3.19935*10**10, 3.48475*10**10, 3.7972*10**10, \
4.1392*10**10, 4.5135*10**10, 4.92315*10**10, 5.37146*10**10, \
5.86208*10**10, 6.39902*10**10, 6.98667*10**10, 7.62986*10**10, \
8.33388*10**10, 9.10454*10**10, 9.94825*10**10, 1.0872*10**11, \
1.18835*10**11, 1.29912*10**11, 1.42045*10**11, 1.55334*10**11, \
1.69893*10**11, 1.85845*10**11, 2.03325*10**11, 2.22483*10**11, \
2.43483*10**11, 2.66504*10**11, 2.91745*10**11, 3.19424*10**11, \
3.49782*10**11, 3.83083*10**11, 4.19616*10**11, 4.59704*10**11, \
5.03697*10**11, 5.51984*10**11, 6.04994*10**11, 6.63196*10**11, \
7.27111*10**11, 7.97309*10**11, 8.74423*10**11, 9.59146*10**11, \
1.05225*10**12, 1.15457*10**12, 1.26705*10**12, 1.39071*10**12, \
1.52669*10**12, 1.67625*10**12, 1.84077*10**12, 2.02177*10**12, \
2.22095*10**12, 2.44017*10**12, 2.68149*10**12, 2.94719*10**12, \
3.23979*10**12, 3.56207*10**12, 3.9171*10**12, 4.3083*10**12, \
4.73944*10**12, 5.21467*10**12, 5.73862*10**12, 6.3164*10**12, \
6.95366*10**12, 7.65668*10**12, 8.43239*10**12, 9.28849*10**12, \
1.02335*10**13, 1.12769*10**13, 1.24292*10**13, 1.37019*10**13, \
1.51081*10**13, 1.6662*10**13, 1.83796*10**13, 2.02785*10**13, \
2.23783*10**13, 2.47008*10**13, 2.72702*10**13, 3.01136*10**13, \
3.32607*10**13, 3.67449*10**13, 4.06033*10**13, 4.48771*10**13, \
4.96122*10**13, 5.48596*10**13, 6.06765*10**13, 6.7126*10**13, \
7.42791*10**13, 8.22144*10**13, 9.10199*10**13, 1.00794*10**14, \
1.11645*10**14, 1.23697*10**14, 1.37085*10**14, 1.51961*10**14, \
1.68497*10**14, 1.86882*10**14, 2.07329*10**14, 2.30078*10**14, \
2.55393*10**14, 2.83574*10**14, 3.14954*10**14, 3.49908*10**14, \
3.88856*10**14, 4.32269*10**14, 4.80672*10**14, 5.3466*10**14, \
5.94896*10**14, 6.62127*10**14, 7.37191*10**14, 8.21031*10**14, \
9.14708*10**14, 1.01941*10**15, 1.13649*10**15, 1.26745*10**15, \
1.41399*10**15, 1.57804*10**15, 1.76175*10**15, 1.96757*10**15, \
2.19826*10**15, 2.45693*10**15, 2.7471*10**15, 3.07274*10**15, \
3.43836*10**15, 3.84904*10**15, 4.31056*10**15, 4.82946*10**15, \
5.41314*10**15, 6.07002*10**15, 6.80965*10**15, 7.64288*10**15, \
8.58205*10**15, 9.64119*10**15, 1.08363*10**16, 1.21855*10**16, \
1.37097*10**16, 1.54324*10**16, 1.73808*10**16, 1.95857*10**16, \
2.20826*10**16, 2.49118*10**16, 2.81198*10**16, 3.17597*10**16, \
3.58926*10**16, 4.05888*10**16, 4.59288*10**16, 5.20057*10**16, \
5.89265*10**16, 6.6815*10**16, 7.5814*10**16, 8.60888*10**16, \
9.78309*10**16, 1.11262*10**17, 1.26641*10**17, 1.44267*10**17, \
1.64491*10**17, 1.87719*10**17, 2.1443*10**17, 2.45181*10**17, \
2.80629*10**17, 3.21544*10**17, 3.68836*10**17, 4.23576*10**17, \
4.87038*10**17, 5.6073*10**17, 6.46452*10**17, 7.46353*10**17, \
8.63013*10**17, 9.99541*10**17, 1.1597*10**18, 1.34806*10**18, \
1.57023*10**18, 1.83314*10**18, 2.14539*10**18, 2.51785*10**18, \
2.96444*10**18, 3.50346*10**18, 4.16014*10**18, 4.9761*10**18)
xSol = np.zeros(401)
ySol = np.zeros(401)
for i in range(401):
    xSol[i] = 0.1*i
    ySol[i] = sol[i]

plt.plot(xSol,ySol,'k--')
plt.show()