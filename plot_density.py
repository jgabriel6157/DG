import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter
import fnmatch
import numpy as np
import os
import random
import time

def getFunction(basis,n,x):
    if basis=='legendre':
        return LegendreP(n,x)
    elif basis=='legendreOrthonormal':
        return LegendrePorthonormal(n,x)
    elif basis=='quadratic':
        return Quadratic(n,x)
    elif basis=='linear':
        return linear(n,x)
    else:
        return 0

def LegendreP(n,x):
    if n==0:
        return 1
    elif n==1:
        return x
    else:
        return ((2.0*n-1.0)*x*LegendreP(n-1,x)-(n-1)*LegendreP(n-2,x))/n
    
def LegendrePorthonormal(n,x):
    return np.sqrt((2.0*n+1.0)/2.0)*LegendreP(n,x)

def Quadratic(n,x):
    if n==0:
        return -x*(1.0-x)/2.0
    elif n==1:
        return (1.0-x)*(1.0+x)
    else:
        return x*(1+x)/2
    
def linear(n,x):
    if n==0:
        return (1.0-x)/2.0
    else:
        return (1+x)/2

def assignFloat(varString):
    number = 1.0
    valueCheck = "*"
    value = varString
    while("*" in valueCheck):
        valueCheck = value
        if "*" in value:
            dum1 = value[0:value.index("*")]
            value = value[value.index("*")+1:]
        else:
            dum1 = value
        if dum1 == "pi":
            number*=np.pi
        else:
            number*=float(dum1)
        
        
    return number

fileName = 'Density.csv'
fileNameSol = 'OutputS.csv'
inputFile = open('input.txt','r')

while True:
    inputParam = inputFile.readline()

    if inputParam[0:4]=='jMax':        
        jMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:6]=='length':
        value = inputParam[inputParam.index('=')+2:-1]
        length = assignFloat(value)
    elif inputParam[0:4]=='lMax':
        lMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:5]=='basis':
        basis = inputParam[inputParam.index('=')+2:-1]
    elif inputParam[0:4]=='tMax':
        tMax = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:2]=='dt':
        dt = float(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:4]=='nout':
        nout = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:3]=='nvx':
        nvx = int(inputParam[inputParam.index('=')+2:-1])
    elif inputParam[0:5]=='maxVX':
        domainMaxVX = assignFloat(inputParam[inputParam.index('=')+2:-1])
    if not inputParam:
        break
nout+=1
lMax+=1
inputFile.close()

values = pd.read_csv(fileName,header=None)
values = values[0].to_numpy()
# valuesSol = pd.read_csv(fileNameSol,header=None)
# valuesSol = valuesSol[0].to_numpy()
m = 100464
dx = length/jMax
dvx = 2*domainMaxVX/(nvx-1)
# dvx = 1.0/nvx
u = np.zeros((lMax,jMax))
# uSol = np.zeros((lMax,jMax,nvx))

fig = plt.figure()
ax = fig.gca()
ax.set_yscale('log')

for j in range(jMax):
    for lx in range(lMax):
        u[lx,j] = values[m]
        # uSol[lx,j,k] = valuesSol[m]
        m = m+1

res = 2
for j in range(jMax):
    xj = j*dx+dx/2
    y = np.zeros(res)
    x = np.zeros(res)
    # sol = np.zeros(res)
    for i in range(res):
        x[i] = j*dx+i*dx/(res-1)
        for l in range(lMax):
            y[i] += u[l][j]*getFunction(basis,l,(2.0/dx)*(x[i]-xj))
            # print(u[l][j])
            # sol[i] += uSol[l][j][vx]*getFunction(basis,l,(2.0/dx)*(x[i]-xj))
    plt.plot(x,y,color='red')
        # ax.plot(x,[y_offset]*len(x),sol,color='black')
        # ax.plot(x,[y_offset]*len(x),y-sol,color='red')
sol = (1.76398*10**19, 1.48019*10**19, 1.25087*10**19, 1.06194*10**19, \
9.04856*10**18, 7.73404*10**18, 6.62842*10**18, 5.69459*10**18, \
4.90302*10**18, 4.2299*10**18, 3.65591*10**18, 3.1652*10**18, \
2.74472*10**18, 2.38365*10**18, 2.07298*10**18, 1.8052*10**18, \
1.57398*10**18, 1.37402*10**18, 1.20083*10**18, 1.05061*10**18, \
9.20135*10**17, 8.06668*10**17, 7.0787*10**17, 6.21743*10**17, \
5.46579*10**17, 4.80913*10**17, 4.23484*10**17, 3.73211*10**17, \
3.29159*10**17, 2.90524*10**17, 2.56609*10**17, 2.26812*10**17, \
2.00612*10**17, 1.77557*10**17, 1.57252*10**17, 1.39356*10**17, \
1.23573*10**17, 1.09642*10**17, 9.73382*10**16, 8.64641*10**16, \
7.68472*10**16, 6.83368*10**16, 6.08009*10**16, 5.4124*10**16, \
4.82045*10**16, 4.29537*10**16, 3.82933*10**16, 3.41547*10**16, \
3.04775*10**16, 2.72085*10**16, 2.4301*10**16, 2.17137*10**16, \
1.94101*10**16, 1.73582*10**16, 1.55296*10**16, 1.38993*10**16, \
1.24451*10**16, 1.11474*10**16, 9.9888*10**15, 8.95403*10**15, \
8.02943*10**15, 7.20294*10**15, 6.46384*10**15, 5.80263*10**15, \
5.21087*10**15, 4.68106*10**15, 4.20654*10**15, 3.78137*10**15, \
3.40029*10**15, 3.0586*10**15, 2.75212*10**15, 2.47712*10**15, \
2.23029*10**15, 2.00867*10**15, 1.80961*10**15, 1.63076*10**15, \
1.47001*10**15, 1.32549*10**15, 1.19552*10**15, 1.0786*10**15, \
9.73378*10**14, 8.78662*10**14, 7.93377*10**14, 7.1656*10**14, \
6.47352*10**14, 5.84979*10**14, 5.28752*10**14, 4.7805*10**14, \
4.32319*10**14, 3.91059*10**14, 3.53823*10**14, 3.2021*10**14, \
2.8986*10**14, 2.62449*10**14, 2.37685*10**14, 2.15307*10**14, \
1.95081*10**14, 1.76795*10**14, 1.60259*10**14, 1.45302*10**14, \
1.31769*10**14, 1.19523*10**14, 1.08438*10**14, 9.84019*10**13, \
8.93135*10**13, 8.10813*10**13, 7.36231*10**13, 6.68645*10**13, \
6.07386*10**13, 5.51849*10**13, 5.0149*10**13, 4.55815*10**13, \
4.14381*10**13, 3.76786*10**13, 3.42666*10**13, 3.11695*10**13, \
2.83576*10**13, 2.58042*10**13, 2.3485*10**13, 2.13781*10**13, \
1.94638*10**13, 1.7724*10**13, 1.61426*10**13, 1.47048*10**13, \
1.33975*10**13, 1.22085*10**13, 1.11269*10**13, 1.01428*10**13, \
9.24737*10**12, 8.43237*10**12, 7.69046*10**12, 7.01498*10**12, \
6.39988*10**12, 5.83964*10**12, 5.32931*10**12, 4.86434*10**12, \
4.44065*10**12, 4.05449*10**12, 3.70249*10**12, 3.38157*10**12, \
3.08894*10**12, 2.82206*10**12, 2.57863*10**12, 2.35656*10**12, \
2.15393*10**12, 1.96902*10**12, 1.80025*10**12, 1.64619*10**12, \
1.50553*10**12, 1.3771*10**12, 1.2598*10**12, 1.15267*10**12, \
1.0548*10**12, 9.65388*10**11, 8.83683*10**11, 8.09014*10**11, \
7.40766*10**11, 6.78379*10**11, 6.21343*10**11, 5.69192*10**11, \
5.21502*10**11, 4.77888*10**11, 4.37997*10**11, 4.01507*10**11, \
3.68126*10**11, 3.37587*10**11, 3.09645*10**11, 2.8408*10**11, \
2.60687*10**11, 2.39283*10**11, 2.19698*10**11, 2.01778*10**11, \
1.85383*10**11, 1.70385*10**11, 1.56667*10**11, 1.44123*10**11, \
1.32654*10**11, 1.22173*10**11, 1.12598*10**11, 1.03857*10**11, \
9.58813*10**10, 8.86108*10**10, 8.19897*10**10, 7.59676*10**10, \
7.04989*10**10, 6.5542*10**10, 6.10594*10**10, 5.70173*10**10, \
5.33853*10**10, 5.0136*10**10, 4.7245*10**10, 4.46907*10**10, \
4.24538*10**10, 4.05179*10**10, 3.88682*10**10, 3.74926*10**10, \
3.63808*10**10, 3.55246*10**10, 3.49175*10**10, 3.4555*10**10, \
3.44345*10**10, 3.4555*10**10, 3.49175*10**10, 3.55246*10**10, \
3.63808*10**10, 3.74926*10**10, 3.88682*10**10, 4.05179*10**10, \
4.24538*10**10, 4.46907*10**10, 4.7245*10**10, 5.0136*10**10, \
5.33853*10**10, 5.70173*10**10, 6.10594*10**10, 6.5542*10**10, \
7.04989*10**10, 7.59676*10**10, 8.19897*10**10, 8.86108*10**10, \
9.58813*10**10, 1.03857*10**11, 1.12598*10**11, 1.22173*10**11, \
1.32654*10**11, 1.44123*10**11, 1.56667*10**11, 1.70385*10**11, \
1.85383*10**11, 2.01778*10**11, 2.19698*10**11, 2.39283*10**11, \
2.60687*10**11, 2.8408*10**11, 3.09645*10**11, 3.37587*10**11, \
3.68126*10**11, 4.01507*10**11, 4.37997*10**11, 4.77888*10**11, \
5.21502*10**11, 5.69192*10**11, 6.21343*10**11, 6.78379*10**11, \
7.40766*10**11, 8.09014*10**11, 8.83683*10**11, 9.65388*10**11, \
1.0548*10**12, 1.15267*10**12, 1.2598*10**12, 1.3771*10**12, \
1.50553*10**12, 1.64619*10**12, 1.80025*10**12, 1.96902*10**12, \
2.15393*10**12, 2.35656*10**12, 2.57863*10**12, 2.82206*10**12, \
3.08894*10**12, 3.38157*10**12, 3.70249*10**12, 4.05449*10**12, \
4.44065*10**12, 4.86434*10**12, 5.32931*10**12, 5.83964*10**12, \
6.39988*10**12, 7.01498*10**12, 7.69046*10**12, 8.43237*10**12, \
9.24737*10**12, 1.01428*10**13, 1.11269*10**13, 1.22085*10**13, \
1.33975*10**13, 1.47048*10**13, 1.61426*10**13, 1.7724*10**13, \
1.94638*10**13, 2.13781*10**13, 2.3485*10**13, 2.58042*10**13, \
2.83576*10**13, 3.11695*10**13, 3.42666*10**13, 3.76786*10**13, \
4.14381*10**13, 4.55815*10**13, 5.0149*10**13, 5.51849*10**13, \
6.07386*10**13, 6.68645*10**13, 7.36231*10**13, 8.10813*10**13, \
8.93135*10**13, 9.84019*10**13, 1.08438*10**14, 1.19523*10**14, \
1.31769*10**14, 1.45302*10**14, 1.60259*10**14, 1.76795*10**14, \
1.95081*10**14, 2.15307*10**14, 2.37685*10**14, 2.62449*10**14, \
2.8986*10**14, 3.2021*10**14, 3.53823*10**14, 3.91059*10**14, \
4.32319*10**14, 4.7805*10**14, 5.28752*10**14, 5.84979*10**14, \
6.47352*10**14, 7.1656*10**14, 7.93377*10**14, 8.78662*10**14, \
9.73378*10**14, 1.0786*10**15, 1.19552*10**15, 1.32549*10**15, \
1.47001*10**15, 1.63076*10**15, 1.80961*10**15, 2.00867*10**15, \
2.23029*10**15, 2.47712*10**15, 2.75212*10**15, 3.0586*10**15, \
3.40029*10**15, 3.78137*10**15, 4.20654*10**15, 4.68106*10**15, \
5.21087*10**15, 5.80263*10**15, 6.46384*10**15, 7.20294*10**15, \
8.02943*10**15, 8.95403*10**15, 9.9888*10**15, 1.11474*10**16, \
1.24451*10**16, 1.38993*10**16, 1.55296*10**16, 1.73582*10**16, \
1.94101*10**16, 2.17137*10**16, 2.4301*10**16, 2.72085*10**16, \
3.04775*10**16, 3.41547*10**16, 3.82933*10**16, 4.29537*10**16, \
4.82045*10**16, 5.4124*10**16, 6.08009*10**16, 6.83368*10**16, \
7.68472*10**16, 8.64641*10**16, 9.73382*10**16, 1.09642*10**17, \
1.23573*10**17, 1.39356*10**17, 1.57252*10**17, 1.77557*10**17, \
2.00612*10**17, 2.26812*10**17, 2.56609*10**17, 2.90524*10**17, \
3.29159*10**17, 3.73211*10**17, 4.23484*10**17, 4.80913*10**17, \
5.46579*10**17, 6.21743*10**17, 7.0787*10**17, 8.06668*10**17, \
9.20135*10**17, 1.05061*10**18, 1.20083*10**18, 1.37402*10**18, \
1.57398*10**18, 1.8052*10**18, 2.07298*10**18, 2.38365*10**18, \
2.74472*10**18, 3.1652*10**18, 3.65591*10**18, 4.2299*10**18, \
4.90302*10**18, 5.69459*10**18, 6.62842*10**18, 7.73404*10**18, \
9.04856*10**18, 1.06194*10**19, 1.25087*10**19, 1.48019*10**19, \
1.76398*10**19)
xSol = np.zeros(401)
ySol = np.zeros(401)
for i in range(401):
    xSol[i] = 0.1*i
    ySol[i] = sol[i]*0.282316126

plt.plot(xSol,ySol,'k--')
plt.show()